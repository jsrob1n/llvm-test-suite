import lit.formats
import lit
import os, glob, re

def getUserTimeFromTimeOutput(f):
    with open(f) as fd:
        l = [l for l in fd.readlines()
             if l.startswith('user')]
    assert len(l) == 1
        
    m = re.match(r'user\s+([0-9.]+)', l[0])
    return float(m.group(1))

class TestSuiteTest(lit.formats.ShTest):
    def __init__(self):
        lit.formats.ShTest.__init__(self, False)
        
    def execute(self, test, litConfig):
        result = lit.formats.ShTest.execute(self, test, litConfig)
        basepath = os.path.dirname(test.getFilePath())
        
        if not result.code.isFailure:
            # Collect the timing information.
            timeglob = os.path.join(basepath, 'Output', '*.time')
            times = glob.glob(timeglob)
            assert len(times) == 1
            time = getUserTimeFromTimeOutput(times[0])

            result.addMetric('exec_time', lit.Test.toMetricValue(time))

        # For completeness, attempt to find compile time information too.
        compile_time = 0.0
        for path, subdirs, files in os.walk(basepath):
            for file in files:
                if file.endswith('.o.time'):
                    compile_time += getUserTimeFromTimeOutput(os.path.join(path, file))
        result.addMetric('compile_time', lit.Test.toMetricValue(compile_time))
        
        return result

config.name = 'test-suite'

config.test_format = TestSuiteTest()
config.suffixes = ['.test']
config.test_source_root = os.path.dirname(__file__)
config.excludes = ['ABI-Testsuite']
